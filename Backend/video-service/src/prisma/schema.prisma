generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Media {
  id         Int       @id @default(autoincrement())
  playbackId String    @db.VarChar(255)
  assetId    String    @db.VarChar(255)
  videoUrl   String
  createdAt  DateTime? @default(now()) @db.Timestamp(6)
}

model comments {
  id             Int        @id @default(autoincrement())
  video_id       Int?
  user_id        Int?
  parent_id      Int?
  content        String
  created_at     DateTime?  @default(now()) @db.Timestamp(6)
  comments       comments?  @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comments comments[] @relation("commentsTocomments")
}

model subscriptions {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  channel_id Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerk_user_id String    @unique
  channel_name  String
  avatar_url    String?
  bio           String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  videos        videos[]
}

model categories {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  slug       String    @unique
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  videos     videos[]
}

model videos {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String
  description      String?
  mux_status       String?
  mux_asset_id     String?     @unique
  mux_upload_id    String?     @unique
  mux_playback_id  String?     @unique
  mux_track_id     String?     @unique
  mux_track_status String?
  user_id          String      @db.Uuid
  category_id      String?     @db.Uuid
  created_at       DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?   @default(now()) @db.Timestamptz(6)
  categories       categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users            users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
